//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "hotconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
//#include <pqxx/pqxx>
#ifdef LIBXML
# include <libxml++/libxml++.h>
#endif
#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;
#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1
#include <boost/progress.hpp>
#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/linestring.hpp>
#include <boost/geometry/geometries/polygon.hpp>
#include <boost/geometry/geometries/geometries.hpp>

#include <pqxx/pqxx>

typedef boost::geometry::model::d2::point_xy<double> point_t;
typedef boost::geometry::model::polygon<point_t> polygon_t;
typedef boost::geometry::model::multi_point<point_t> mpoint_t;
typedef boost::geometry::model::linestring<point_t> linestring_t;
typedef boost::geometry::model::multi_linestring<linestring_t> mlinestring_t;

#include "hotosm.hh"
#include <data/osmobjects.hh>

namespace osmobjects {

std::string
OsmObject::serializeTags(std::map<std::string, std::string> &tags) {
    std::string output;
    output += "\'";

    for (auto it = tags.begin(); it != tags.end(); it++) {
        output += "\"" + it->first + "\" => \"" + it->second + "\" ";

        // Check that is not last element to add comma.   
        if (std::next(it) != tags.end()) {
            output += ",";
        }
    }

    output += "\'";

    return output;
}

bool 
OsmNode::insert(std::shared_ptr<pqxx::connection> db) {
    std::string query = "INSERT INTO nodes(id, version, user_id, tstamp, changeset_id, tags, geom) VALUES(";
    query += std::to_string(id) + ",";
    query += std::to_string(version) + ",";
    query += std::to_string(uid) + ",";

    // Fix timestamp format.
    std::string ts = to_iso_extended_string(timestamp);

    query += "\'" + ts + "\'" + ",";
    query += std::to_string(change_id )+ ",";

    std::string tags_value = "null";

    if (!tags.empty()) {
        tags_value = serializeTags(tags);
    }

    query += tags_value + ",";
    query += "ST_GeomFromText('POINT(" + std::to_string(point.x()) + " " + std::to_string(point.y()) + ")\', 4326))";

    pqxx::work worker = pqxx::work(*db);
    pqxx::result result = worker.exec(query);
    worker.commit();

    return false;
}


void
OsmObject::dump(void)
{
    std::cout << "Dumping OsmObject()" << std::endl;
    if (action == create) {
        std::cout << "\tAction: Create" << std::endl;
    } else if (action == modify) {
        std::cout << "\tAction: Modify" << std::endl;
    } else if (action == remove) {
        std::cout << "\tAction: Delete" << std::endl;
    }
    
    if (type == node) {
        std::cout << "\tType: OsmNode" << std::endl;
    } else if (type == way) {
        std::cout << "\tType: OsmWay" << std::endl;
    } else if (type == relation) {
        std::cout << "\tType: OsmRelation" << std::endl;
    }
    
    std::cout << "\tID: " << id << std::endl;
    std::cout << "\tVersion: " << version << std::endl;
    std::cout << "\tTimestamp: " << timestamp << std::endl;
    std::cout << "\tUID: " << uid << std::endl;
    std::cout << "\tUser: " << user << std::endl;
    if (change_id > 0) {
        std::cout << "\tChange ID: " << change_id << std::endl;
    }
    if (tags.size() > 0) {
        std::cout << "\tTags: " << tags.size() << std::endl;            
        for (auto it = std::begin(tags); it != std::end(tags); ++it) {
            std::cout << "\t\t" << it->first << " : " << it->second << std::endl;
        }
    }
};

// This represents an ODM node. A node has point coordinates, and may
// contain tags if it's a POI.
void
OsmWay::makeLinestring(point_t point)
{
    // If the first and last ref are the same, it's a closed polygon,
    // like a building.
    if (refs.begin() == refs.end()) {
        boost::geometry::append(polygon, point);
    } else {
        boost::geometry::append(linestring, point);
    }
};

void
OsmWay::dump(void){
    OsmObject::dump();
    if (refs.size() > 0) {
        std::cout << "\tRefs: " << refs.size() << std::endl;
        std::cout << "\t";
        for (auto it = std::begin(refs); it != std::end(refs); ++it) {
            std::cout << *it << ", ";
        }
        std::cout << std::endl;
    }
};

} // EOF namespace osmobjects
