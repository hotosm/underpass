//
// Copyright (c) 2020, 2021, 2022 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

/// \file conflate.hh
/// \brief This file implements conflation of buildings and highways

#ifndef __CONFLATE_HH__
#define __CONFLATE_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include "data/pq.hh"
#include "data/osmobjects.hh"
#include "validate/validate.hh"

/// \namespace conflate
namespace conflate {

/// \class Conflate
/// \brief This class conflates buildings and highways
class Conflate {
public:
    Conflate(void);
    Conflate(const multipolygon_t &poly);
    Conflate(const std::string &dburl);
    Conflate(const std::string &dburl, const multipolygon_t &poly);
    /// COnnect to the database os OSM data
    bool connect(const std::string &dburl);
    /// Create a postgres view using a multipolygon for the boundary
    bool createView(const multipolygon_t &poly);
    /// Create a postgres view using a WKT string for the boundary
    bool createView(const std::string &wkt);
    /// Compare a new building polygon against OSM data
    std::shared_ptr<std::vector<std::shared_ptr<ValidateStatus>>>
    newDuplicatePolygon(const osmobjects::OsmWay &way);
    /// Scan the database for duplicate buildings
    std::shared_ptr<std::vector<std::shared_ptr<ValidateStatus>>>
    existingDuplicatePolygon(void);
    /// Compare a highway against OSM data
    std::shared_ptr<std::vector<std::shared_ptr<ValidateStatus>>>
    newDuplicateLineString(const osmobjects::OsmWay &way);
    /// Scan the database for duplicate highways
    std::shared_ptr<std::vector<std::shared_ptr<ValidateStatus>>>
    existingDuplicateLineString(void);

    pq::Pq conf_db; ///< The handle for the database connection
    multipolygon_t view; ///< The boundary used to filter data
};
    
} // namespace conflate

#endif

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

