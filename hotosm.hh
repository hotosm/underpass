//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __HOTOSM_HH__
#define __HOTOSM_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>

#include <pqxx/pqxx>
#include <osmium/osm/timestamp.hpp>
#include <osmium/osm/location.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/node_ref.hpp>
#include <osmium/osm/node_ref_list.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/relation.hpp>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "hottm.hh"

namespace apidb {

enum mapformats { gpkg, shp, pbf, img, obf, mbtiles, mapsme };

// This manages the connection to to either an OSM database or the
// tasking manager.
class QueryDB
{
  public:
    enum object { building, waterway, highway,
        education, emergency, financial, government,
        humanitarian, landuse, natural, power,
        sport, transportation, water, language, all };
    enum action { changesets, added, modified, deleted, totals };
    
    // QueryDB(const std::string &database);
    QueryDB(void);
    ~QueryDB(void);

    pqxx::result query(std::string &select);
    bool connect(std::string &database);
    pqxx::connection *db;
    pqxx::work *worker;
protected:
    std::array<std::string, 16> keywords;
};

// This talks to an OSM database using the 'apidb' schema,
// which contains the history of changes.
class QueryChanges : public QueryDB
{
  public:
    QueryChanges(void);
    ~QueryChanges(void);

    long getCount(object obj, long userid, action op,
                  ptime &start, ptime &end) const;
};

// This talks to an OSM database using the 'pgsnapshot' schema
// with the optional linestring extension.
class QueryStats : public QueryDB
{
  public:    
    QueryStats(void);
    ~QueryStats(void);

    // Get counts of various things, like buildings, and optionally
    // filter by user id, timestamps, or within a polygon.
    long getCount(object foo, long userid, action op,
                  ptime &start, ptime &end /*, polygon */
        ) const;
    long getLength(object obj, long userid, ptime &start, ptime &end);
    ptime &lastUpdate(long userid, ptime &last);
};

// Query a tasking manager database via postgres for statistics
class QueryTM : public QueryDB
{
  public:
    QueryTM(void);
    ~QueryTM(void);

    std::shared_ptr<std::vector<long>> getProjects(long userid);
    // std::shared_ptr<std::vector<long>> getUsers(long projectid)
    // getUserStats(long projectid)
    std::shared_ptr<std::vector<long>> getUserTasks(long projectid, long userid);
    std::shared_ptr<std::vector<int>> getUserTeams(long userid);
    std::shared_ptr<tmdb::TMTeam> getTeam(long userid);

    int getTasksMapped(long userid);
    int getTasksValidated(long userid);
    
    // lastUpdated
    // ptime &dataRegistered
};

// Query a tasking manager database via the REST API for statistics
class QueryTMAPI
{
  public:
    QueryTMAPI(void);
    ~QueryTMAPI(void);

    // std::array &getProjects(long userid) const;
    // getUsers(long projectid)
    // getUserStats(long projectid)
    // getUserTasks(long projectid)
    // lastUpdated
    // dataRegistered
};

class BuildOSM : public QueryDB
{
  public:
    BuildOSM(void) {} ;
    ~BuildOSM(void) {} ;

    // FIXME: just for debugging
    int getWayNodes(long way_id);
    osmium::Node& getNode(int id);
};


} // EOF apidb namespace
#endif  // EOF __HOTOSM_HH__
