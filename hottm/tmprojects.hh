//
// Copyright (c) 2020, 2021, 2022 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

/// \file tmprojects.hh
/// \brief Store projects from the Tasking Manager in the Galaxy database

#ifndef __TMPROJECTS_HH__
#define __TMPROJECTS_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

/// \namespace tmdb
namespace tmdb {

/// \class TMProject
/// \brief This class contains Project information from the Tasking Manager
class TMProject
{
public:
    TMProject(pqxx::result::const_iterator &row);
// private:
    int id;
    int status;
    ptime created;
    int priority;
    std::string default_locale;
    long author_id;
    int mapper_level;
    
    int mapping_permission;
    int validation_permission;
    
    // enforce_random_task_selection
    // bool private;
    bool featured;
    std::string entities_to_map;
    std::string changeset_comment;
    std::string osmcha_filter_id;
    ptime due_date;
    std::string imagery;
    std::string josm_preset;
    std::string id_presets;
    ptime last_updated;
    int license_id;
    //  geometry public.geometry(MultiPolygon,4326),
    // centroid public.geometry(Point,4326),
    std::string  country;
    int task_creation_mode;
    int organisation_id;
    int mapping_types;
    int mapping_editors;
    int validation_editors;
    int total_tasks;
    int tasks_mapped;
    int tasks_validated;
    int tasks_bad_imagery;
};

} // EOF tmdb namespace
#endif  // EOF __TMPROJECTS_HH__

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
