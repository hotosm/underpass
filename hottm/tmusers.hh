//
// Copyright (c) 2020, Humanitarian OpenStreetMap Team
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __TMUSERS_HH__
#define __TMUSERS_HH__

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <iostream>
#include <pqxx/pqxx>

#include <boost/date_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
using namespace boost::posix_time;
using namespace boost::gregorian;

namespace tmdb {

class TMUser
{
public:
    TMUser(pqxx::result::const_iterator &row);
//protected:
    long id;
//     validation_message boolean NOT NULL,
    std::string username;
    int role;
    int mapping_level;
    int tasks_mapped;
    int tasks_validated;
    int tasks_invalidated;
    std::vector<int> projects_mapped;
//     email_address character varying,
//     is_email_verified boolean,
//     is_expert boolean,
//     twitter_id character varying,
//     facebook_id character varying,
//     linkedin_id character varying,
//     slack_id character varying,
//     skype_id character varying,
//     irc_id character varying,
    std::string name;
//     city character varying,
//     country character varying,
//     picture_url character varying,
//     gender integer,
//     self_description_gender character varying,
//     default_editor character varying NOT NULL,
//     mentions_notifications boolean NOT NULL,
//     comments_notifications boolean NOT NULL,
//     projects_notifications boolean NOT NULL,
    ptime date_registered;
    ptime last_validation_date;    
};

} // EOF tmdb namespace
#endif  // EOF __TMUSERS_HH__
