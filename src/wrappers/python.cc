//
// Copyright (c) 2020, 2021, 2022, 2023, 2024 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#define BOOST_BIND_GLOBAL_PLACEHOLDERS 1

#include <boost/python.hpp>
// #include "validate/defaultvalidation.hh"
#include "validate/validate.hh"
#include "osm/osmobjects.hh"
#include "osm/osmchange.hh"
#include "data/pq.hh"

#include "utils/log.hh"
using namespace logger;

#ifdef USE_PYTHON

using namespace boost::python;
using namespace osmobjects;

std::map<valerror_t, std::string> results = {
    {notags, "notags"},
    {complete, "complete"},
    {incomplete, "incomplete"},
    {badvalue, "badvalue"},
    {correct, "correct"},
    {badgeom, "badgeom"},
    {orphan, "orphan"},
    {overlapping, "overlapping"},
    {duplicate, "duplicate"}
};

// ValidateStatus* checkNode(defaultvalidation::DefaultValidation& self, const osmobjects::OsmNode &node, const std::string &type) {
//     // auto _v = self.checkNode(node, type);
//     ValidateStatus* v = new ValidateStatus();
//     // v->status = _v->status;
//     return v;
// }

// ValidateStatus* checkWay(defaultvalidation::DefaultValidation& self, const osmobjects::OsmWay &way, const std::string &type) {
//     // auto _v = self.checkWay(way, type);
//     ValidateStatus* v = new ValidateStatus();
//     // v->status = _v->status;
//     return v;
// }

std::string dumpJSON(ValidateStatus& self) {
    std::string output = "";
    output += "{\n";
    output += "\t\"osm_id\":" + std::to_string(self.osm_id) + ",\n";
    output += "\t\"uid\":" + std::to_string(self.uid) + ",\n";
    output += "\t\"changeset\":" + std::to_string(self.changeset) + ",\n";

    if (self.status.size() > 0) {
        output += "\t\"results\": [";
        for (const auto &stat: std::as_const(self.status)) {
            output += "\"" + results[stat] + "\",";
        }
        output.erase(output.size() - 1);
        output += "]";
    }

    if (self.values.size() > 0) {
        output += ",\n\t\"values\": [";
        for (auto it = std::begin(self.values); it != std::end(self.values); ++it ) {
            output += "\"" + *it + "\",";
        }
        output.erase(output.size() - 1);
        output += "]\n";
    }
    output += "}\n";
    return output;
}

// std::string checkOsmChange(defaultvalidation::DefaultValidation& self, const std::string &xml, const std::string &check) {
//     auto result = self.checkOsmChange(xml, check);
//     std::string output = "[ ";
//     for (auto it = std::begin(result); it != std::end(result); ++it) {
//         if ((*it).status.size() > 0) {
//             output += dumpJSON(*it) + ",";
//         }
//     }
//     output.erase(output.size() - 1);
//     output += " ]";
//     return output;
// }

BOOST_PYTHON_MODULE(underpass)
{
    //
    // using namespace defaultvalidation;
    // class_<DefaultValidation, boost::noncopyable>("Validate")
    //     // .def("checkTag", &DefaultValidation::checkTag)
    //     .def("checkWay", &checkWay, boost::python::return_value_policy<boost::python::manage_new_object>())
    //     .def("checkNode", &checkNode, boost::python::return_value_policy<boost::python::manage_new_object>());
    //     // .def("overlaps", &DefaultValidation::overlaps);
    //     // .def("checkOsmChange", &checkOsmChange);

    class_<ValidateStatus, boost::noncopyable>("ValidateStatus")
        .def("hasStatus", &ValidateStatus::hasStatus)
        .def("dump", &dumpJSON);

    using namespace osmchange;
    class_<OsmChangeFile, boost::noncopyable>("OsmChangeFile")
        .def("readChanges", &OsmChangeFile::readChanges)
        .def("dump", &OsmChangeFile::dump);
}
#endif

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
