//
// Copyright (c) 2023, 2024 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __QUERYRAW_HH__
#define __QUERYRAW_HH__

/// \file queryraw.hh
/// \brief This build raw queries for the database
///
/// This manages the OSM Raw Data schema in a PostgreSQL DB. This
/// includes building queries for existing data in the database, 
/// as well for updating the database.

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <iostream>
#include <map>
#include "data/pq.hh"
#include "osm/osmobjects.hh"
#include "osm/osmchange.hh"

using namespace pq;
using namespace osmobjects;
using namespace osmchange;

/// \namespace queryraw
namespace queryraw {

/// \class QueryRaw
/// \brief This handles all raw data database access
///
/// This class handles all the queries to the OSM Raw Data PostgreSQL DB.
/// This includes querying the database for existing data, as
/// well as updating the data (geometries and tags) applying a replication file.
class QueryRaw {
  public:
    QueryRaw(void);
    ~QueryRaw(void){};
    QueryRaw(std::shared_ptr<Pq> db);

    // Name of the table for storing polygons
    static const std::string polyTable;
    // Name of the table for storing linestrings
    static const std::string lineTable;

    /// Build query for processed Node
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmNode &node) const;
    /// Build query for processed Way
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmWay &way) const;
    /// Build query for processed Relation
    std::shared_ptr<std::vector<std::string>> applyChange(const OsmRelation &relation) const;
    /// Build all geometries for a OsmChange file
    void buildGeometries(std::shared_ptr<OsmChangeFile> osmchanges, const multipolygon_t &poly);
    /// Get nodes for filling Node cache from refs on ways 
    void getNodeCacheFromWays(std::shared_ptr<std::vector<OsmWay>> ways, std::map<double, point_t> &nodecache) const;
    // Get ways by node refs (used for ways geometries)
    std::list<std::shared_ptr<OsmWay>> getWaysByNodesRefs(std::string &nodeIds) const;
    // Get ways by ids (used for relations geometries)
    void getWaysByIds(std::string &relsForWayCacheIds, std::map<long, std::shared_ptr<osmobjects::OsmWay>> &waycache);
    // Get relations by referenced ways (used for relations geometries)
    std::list<std::shared_ptr<OsmRelation>> getRelationsByWaysRefs(std::string &wayIds) const;
    // OSM DB connection
    std::shared_ptr<Pq> dbconn;
    // Get object (nodes, ways or relations) count from the database
    int getCount(const std::string &tableName);
    // Build tags query for insert tags into the database
    std::string buildTagsQuery(std::map<std::string, std::string> tags) const;
    // Get ways by page
    std::shared_ptr<std::vector<OsmWay>> getWaysFromDB(long lastid, int pageSize, const std::string &tableName);
    // Get ways by page, without refs (useful for non OSM databases)
    std::shared_ptr<std::vector<OsmWay>> getWaysFromDBWithoutRefs(long lastid, int pageSize, const std::string &tableName);
    // Get nodes by page
    std::shared_ptr<std::vector<OsmNode>> getNodesFromDB(long lastid, int pageSize);
    // Get relations by page
    std::shared_ptr<std::vector<OsmRelation>> getRelationsFromDB(long lastid, int pageSize);
};

class SQLPrep : public QueryRaw {
  public:
    SQLPrep(void) : QueryRaw() {
        init();
    };

    /// Initialize the SQL prepared statements or bulk.
    SQLPrep(std::shared_ptr<Pq> &pq) : QueryRaw(pq) {
        init();
    };
    void init(void);

    /// Drop a database entry from a database table.
    bool drop_entries(const std::string &op, const std::vector<long> ids);

    /// Insert entries into a database table.
    bool insert_entries(const std::vector<osmobjects::OsmWay> &ways);
    bool insert_entries(const std::vector<osmobjects::OsmNode> &nodes);
    bool insert_entries(const std::vector<osmobjects::OsmRelation> &relations);

    /// Get data from a database table.
    void select_entries(const std::string &op, const std::vector<long> ids);
};

} // namespace queryraw

#endif // EOF __QUERYRAW_HH__

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
