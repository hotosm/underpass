//
// Copyright (c) 2020, 2021, 2022, 2023 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __DATA_HH__
#define __DATA_HH__

/// \file data.hh
/// \brief This build stats queries for the database
///
/// This manages the OSM Stats schema in a postgres database. This
/// includes building queries for existing data in the database, 
/// as well for updating the database.

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <algorithm>
#include <array>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include <boost/date_time.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "osm/changeset.hh"
#include "osm/osmchange.hh"
#include "data/pq.hh"

using namespace pq;

// Forward declarations
namespace changeset {
  class ChangeSet;
};
namespace osmchange {
  class OsmChange;
  class ChangeStats;
}; // namespace osmchange

/// \namespace querystats
namespace querystats {

/// \class QueryStats
/// \brief This handles all direct database access
///
/// This class handles all the queries to the OSM Stats database.
/// This includes querying the database for existing data, as
/// well as updating the data whenh applying a replication file.
class QueryStats {
  public:
    QueryStats(void);
    ~QueryStats(void){};
    QueryStats(std::shared_ptr<Pq> db);
    /// Build query for processed ChangeSet
    std::string applyChange(const changeset::ChangeSet &change) const;
    /// Build query for processed OsmChange
    std::string applyChange(const osmchange::ChangeStats &change) const;
    // Database connection, used for escape strings
    std::shared_ptr<Pq> dbconn;
};

} // namespace querystats

#endif // EOF __DATA_HH__

// local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
