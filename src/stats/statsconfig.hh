//
// Copyright (c) 2020, 2021, 2022, 2023 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __STATSCONFIG_HH__
#define __STATSCONFIG_HH__

/// \file statsconfig.hh
/// \brief Stats configuration
///
/// Load and manage stats configurations

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
# include "unconfig.h"
#endif

#include <map>
#include <string>
#include <vector>
#include <memory>
#include "osm/osmchange.hh"

/// \namespace statsconfig
namespace statsconfig {

    /// \class StatsConfigCategory
    /// \brief This class manages configurations for stats collection
    class StatsConfigCategory {
        public:
            std::string name;
            std::map<std::string, std::set<std::string>> way;
            std::map<std::string, std::set<std::string>> node;
            std::map<std::string, std::set<std::string>> relation;
            StatsConfigCategory(std::string name);
            StatsConfigCategory
            (
                std::string name,
                std::map<std::string, std::set<std::string>> way,
                std::map<std::string, std::set<std::string>> node,
                std::map<std::string, std::set<std::string>> relation
            );
    };

   /// \class StatsConfig
   /// \brief Stats configuration manager
   class StatsConfig {
        public:
            StatsConfig();
            std::string search(std::string tag, std::string value, osmchange::osmtype_t type);
            static void setConfigurationFile(std::string statsConfigFilename);
        private:
            static std::map<std::string, std::shared_ptr<std::vector<StatsConfigCategory>>> cache;
            static std::string path;
            bool searchCategory(std::string tag, std::string value, std::map<std::string, std::set<std::string>> tags);
            std::shared_ptr<std::vector<statsconfig::StatsConfigCategory>> read_yaml(std::string filename);

    };

} // EOF statsconfig namespace

#endif  // EOF __STATSCONFIG_HH__

// Local Variables:
// mode: C++
// indent-tabs-mode: nil
// End:
