//
// Copyright (c) 2020, 2021, 2022 Humanitarian OpenStreetMap Team
//
// This file is part of Underpass.
//
//     Underpass is free software: you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
//
//     Underpass is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.
//
//     You should have received a copy of the GNU General Public License
//     along with Underpass.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef __OSMSTATS_HH__
#define __OSMSTATS_HH__

/// \file galaxy.hh
/// \brief This file is used to work with the OSM Stats database
///
/// This manages the OSM Stats schema in a postgres database. This
/// includes querying existing data in the database, as well as
/// updating the database.

// This is generated by autoconf
#ifdef HAVE_CONFIG_H
#include "unconfig.h"
#endif

#include <algorithm>
#include <array>
#include <iostream>
#include <memory>
#include <pqxx/pqxx>
#include <string>
#include <vector>

#include <boost/date_time.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
using namespace boost::posix_time;
using namespace boost::gregorian;

#include "validate/validate.hh"
#include "data/pq.hh"
#include "hottm/tmdefs.hh"
#include "hottm/tmusers.hh"
#include "galaxy/changeset.hh"
#include "galaxy/osmchange.hh"

using namespace tmdb;

// Forward declarations
namespace changeset {
class ChangeSet;
};
namespace osmchange {
class OsmChange;
class ChangeStats;
}; // namespace osmchange

/// \namespace galaxy
namespace galaxy {

/// \class RawUser
/// \brief Stores the data from the raw user table
///
/// The raw_user table is used to coorelate a user ID with their name.
/// This stores the data as parsed from the database.
class RawUser {
  public:
    RawUser(void){};
    /// Instantiate the user data from an iterator
    RawUser(pqxx::const_result_iterator &res)
    {
        id = res[0].as(int(0));
        name = res[1].c_str();
    }
    /// Instantiate the user data
    RawUser(long uid, const std::string &tag)
    {
        id = uid;
        name = tag;
    }
    int id;           ///< The users OSM ID
    std::string name; ///< The users OSM username
};

/// \class QueryGalaxy
/// \brief This handles all direct database access
///
/// This class handles all the queries to the OSM Stats database.
/// This includes querying the database for existing data, as
/// well as updating the data whenh applying a replication file.
class QueryGalaxy : public pq::Pq {
  public:
    QueryGalaxy(void);
    QueryGalaxy(const std::string &dburl);
    /// close the database connection
    ~QueryGalaxy(void){};

    /// Read in a data file of boundaries as a multipolygon
    bool readGeoBoundaries(const std::string &rawfile) { return false; };

    /// Populate internal storage of a few heavily used data, namely
    /// the indexes for each user, country, or hashtag.
    bool populate(void);

    /// Read changeset data from the galaxy database
    bool getRawChangeSets(std::vector<long> &changeset_id);

    /// Add a user to the internal data store
    int addUser(long id, const std::string &user)
    {
        RawUser ru(id, user);
        users.push_back(ru);
        return users.size();
    };

    /// Add a comment and their ID to the database
    int addComment(long id, const std::string &user);

    /// Apply a changeset to the database
    bool applyChange(const changeset::ChangeSet &change) const;
    /// Apply change statistics to the database
    bool applyChange(const osmchange::ChangeStats &change) const;
    /// Applu data validation to the database
    bool applyChange(const ValidateStatus &validation) const;
    /// Update the validation table, delete any feature that has been fixed.
    bool updateValidation(long id);

    /// Get the timestamp of the last update in the database
    ptime getLastUpdate(void);
    // private:

    /// The SyncResult struct represents the result of a synchronization operation.
    struct SyncResult {
        unsigned long created = 0;
        unsigned long updated = 0;
        unsigned long deleted = 0;

        bool operator==(const SyncResult &other) const
        {
            return created == other.created && updated == other.updated &&
                   deleted == other.deleted;
        }

        /// clear the sync result by resetting all counters to 0.
        void clear()
        {
            created = 0;
            updated = 0;
            deleted = 0;
        }
    };

    /// \brief syncUsers synchronize users from TM DB into Underpass DB.
    /// \param users list of users from TM DB to be synced.
    /// \param purge default to FALSE, if TRUE users that are not in \a users but
    /// still present in the Galaxy DB will be deleted.
    /// \return a SyncResult object.
    SyncResult syncUsers(const std::vector<TMUser> &users, bool purge = false);

    std::vector<RawUser> users; ///< All the raw user data

  private:
    mutable std::mutex changes_write_mutex; ///< Mutex for data acccess when writing
                                            ///< to the database
};

} // namespace galaxy

#endif // EOF __GALAXY_HH__

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:
